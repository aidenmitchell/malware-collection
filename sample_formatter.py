import hashlib
import os
from zipfile import ZipFile
from pathlib import Path

md5 = hashlib.md5()
sha256 = hashlib.sha256()

file = input("Enter the file path: ")  # malware sample
with open(file, "rb") as f:  # hash the file
    while True:
        data = f.read(1024)
        if not data:
            break
        md5.update(data)
        sha256.update(data)

zip_name = os.path.splitext(file)[0] + ".zip"  # name the zip file "malware.zip"
zip_obj = ZipFile(zip_name, 'w')  # start a zip file
print(file)
zip_obj.write(file, os.path.basename(file))  # add the malware sample to the zip file
f = open("readme.txt", "w")  # start a readme file

email = input("Was the file received via email? (y/n): ")  # ask if the file was received via email
if email == "y":  # if the file was received via email
    email_pdf = input("Enter the path to the sanitized email: ")  # ask for the path to the sanitized email
    p = Path(email_pdf)  # create a path object
    p.rename(Path(p.parent, "email.pdf"))  # rename the sanitized email to "email.pdf" for consistency
    zip_obj.write(str(p.parent) + "/email.pdf", "email.pdf")  # add the sanitized email to the zip file
    hosted = input("Was the file included via a link to an external service? (y/n): ")
    if hosted == "n":  # if the file was not hosted
        f.write(os.path.basename(file) + "\n\n")  # write the file name to the readme file
        f.write("MD5: " + md5.hexdigest() + "\n")  # write the MD5 hash to the readme file
        f.write("SHA256: " + sha256.hexdigest() + "\n\n")  # write the SHA256 hash to the readme file
        f.write("File was received directly via email (email is included in .pdf format)") # write that the file was received directly via email to the readme file
    else:
        link = input("Enter the link to the file: ")  # ask for the hosted link to the file
        f.write(os.path.basename(file) + "\n\n")  # write the file name to the readme file
        f.write("MD5: " + md5.hexdigest() + "\n")  # write the MD5 hash to the readme file
        f.write("SHA256: " + sha256.hexdigest() + "\n\n")  # write the SHA256 hash to the readme file
        f.write("Received via a link in an email (email is included in .pdf format)" + "\n")  # write that the file was received via a link in an email to the readme file
        f.write("Hosted at " + link)  # write the hosted link to the readme file
else:  # if the file was not received via email
    delivery_method = input("Enter the delivery method (a Teams message, USB, etc.): ")  # ask for the delivery method
    hosted = input("Was the file included via a link to an external service? (y/n): ")  # ask if the file was hosted
    if hosted == "n":  # if the file was not hosted
        f.write(os.path.basename(file) + "\n\n")  # write the file name to the readme file
        f.write("MD5: " + md5.hexdigest() + "\n")  # write the MD5 hash to the readme file
        f.write("SHA256: " + sha256.hexdigest() + "\n\n")  # write the SHA256 hash to the readme file
        f.write("File was received directly via " + delivery_method + ".")  # write that the file was received directly via the delivery method to the readme file
    else:
        link = input("Enter the link to the file: ")  # ask for the hosted link to the file
        f.write(os.path.basename(file) + "\n\n")  # write the file name to the readme file
        f.write("MD5: " + md5.hexdigest() + "\n")  # write the MD5 hash to the readme file
        f.write("SHA256: " + sha256.hexdigest() + "\n\n")  # write the SHA256 hash to the readme file
        f.write("Received via a link in " + delivery_method + "." + "\n")  # write that the file was received via a link in the delivery method to the readme file
        f.write("Hosted at " + link)  # write the hosted link to the readme file

f.close()  # close the readme file
zip_obj.write("readme.txt")  # add the readme file to the zip file
zip_obj.close()  # close the zip file
